uSCPIfw user documentation
Jiří Pinkava
2010

%!encoding: utf8
%!style(tex): babel
%!postproc(tex): {babel} [english]{babel}
%!postproc(tex): "°"  "$^\circ$"

= SCPI commands =

== Common Command ==

=== *CLS ===
TODO: Incomplete

Clear Status Command

This command clears all status data structures in a device. For a device which minimally
complies with SCPI, these registers are:

- SESR (IEEE 488.2)
- OPERation Status Register (SCPI)
- QUEStionable Status Register (SCPI)
- Error/Event Queue (SCPI)


Execution of *CLS shall also clear any additional status data structures implemented in the
device. The corresponding enable registers are unaffected. See the table in SCPI-99, Command
Reference, 20.7.

=== *ESE[?] ===
TODO: Incomplete

Standard Event Status Enable Command

Standard Event Status Enable Query

=== *ESR ===
TODO: Incomplete

Standard Event Status Register Query

=== *IDN? ===
TODO: Incomplete

Identification Query

Returns device identification data. Device identification data consists of
4 values separated by comma.

<manufacturer>,<model>,<???>,<firmware level field>

=== *OPC[?] ===
TODO: Incomplete

Operation Complete Command

Operation Complete Query
SCPI adds the requirement that *OPC? is implemented as a sequential command.

=== *RST ===
TODO: Incomplete

Reset Command

The “*RST Conditions” chapter of Volume 1 gives pretty a lucid description of the SCPI
requirements of *RST. There are, however, some implications.

=== *SRE[?] ===
TODO: Incomplete

Service Request Enable Command

Service Request Enable Query

=== *STB? ===
TODO: Incomplete

Read Status Byte Query

=== *TRG ===
TODO: Incomplete

Trigger device operation. 

FIXME: there should be few pages.

=== *TST? ===
Self-Test Query

Return 1 if test complete without error, 0 otherwise.

Currently returns always 1 - no tests implemented.

=== *WAI ===
TODO: Incomplete

Wait-to-Continue Command

== Instrument commands ==

=== MEASure ===

==== MEASure:TEMPerature[<channel number>]? ====
TODO: Incomplete

Return current temperature on the sensor in temperature chamber.

Units are °C.

=== SENSe ===

==== SENSe:LIST ====
The list subsystem controls automatic sequencing through associated lists of 
temperatures and other peripheral states (eg. valves), and
dwell time values.  The various values are specified in the LIST:TEMPerature,
LIST:DWELl, ... commands.

The LIST subsystem controls a characteristic of the instrument when that subsystem’s mode
is set to LIST (SOURce:TEMPerature:MODE LIST).

When employing multiple lists, all lists must be of equal length. If they are not of the same
length, an error is generated at sequencing time. An exception is made for the case where the
shorter list is of length 1. In this case, the particular list is treated as though it were a list of
equal length, with all values being the same.

FIXME (lie): Lists are not affected by *RST.

==== SENSe:LIST:COUNt <numeric_value> ====
Controls the number of times the sequence list is scanned when a trigger is 
received.

===== SENSe:LIST:DWELl <numeric_value>{,<numeric_value>} =====
Specifies the dwell time points of the lists. The units are in seconds.

This specifies the amount of time spent at each point.

===== SENSe:LIST:DWELl:POINts? =====
Returns the number of points currently in the DWELl list.

===== SENSe:LIST:SLOPe <numeric_value>{,<numeric_value>} =====
Specifies the slope points of the lists. The units are in °C/sec.

This specifies slope for temperature regulation used to reach set point.

===== SENSe:LIST:SLOPe:POINts? =====
Returns the number of points currently in the SLOPe list.

===== SENSe:LIST:TEMPerature <numeric_value>{,<numeric_value>} =====
Specifies the set points if the list. The units are in °C.

The SPOint command specifies list of target temperatures of the environmental 
chamber.

===== SENSe:LIST:TEMPerature:POINts? =====
Returns the number of points currently in the SPOint list.

=== SOURce ===

==== SOURce:TEMPerature ====
This subsystem controls the temperature of an environmental chamber.

===== SOURce:TEMPerature:DWELl <numeric_value> =====
The DWELl command specifies the amount of time the temperature chamber will stay at the
target temperature.

Units are seconds.

This command is not much usefull yet - just add delay before sweeping is 
completed (eg. for temperature stabilisation purpose).

==== SOURce:TEMPerature:LCONstants ====
A temperature chamber is a closed loop thermal system. The Loop CONstants of such a
system determine its performance. These loop constants are popularly known as pid.

The p is the proportional or GAIN control and can be imagined as a coarse control. The i is
the integral (lead) compensator. This compensators is additional control to 
fine tune the system. The INTegral value improves the steady-state error.

For further information on feedback control systems please refer to 
SCPI, Vol 1: Syntax and Style - Chapter 2, Tuning a Control Loop Performance.

==== SOURce:TEMPerature:LCONstants[:GAIN] <numeric_value> ====
The value of :GAIN determines the time required to reach the target temperature. The higher
the value of gain, the sooner the target temperature is achieved. The GAIN is a unitless
quantity.

After *RST is reset to value stored in EEPROM.

==== SOURce:TEMPerature:LCONstants:INTegral <numeric_value> ====
The INTegral, which is also called a lag compensator, is used to minimize the steady-state
error.

When the steady-state error is too large, it is possible to minimize this value by adjusting the
value of INTegral. The units for INTegral are degree*seconds.

After *RST is reset to value stored in EEPROM.

===== SOURce:TEMPerature:MODE FIXed|LIST =====
Determines which set of commands control the temperature subsystem. If FIXed is selected,
the temperature is determined by the SPOint command. If LIST is selected, the temperature
values are determined by the appropriate temperature list (such as LIST:).

===== SOURce:TEMPerature:SLOPe =====
TODO:

===== SOURce:TEMPerature[:SPOint] <numeric_value> =====
The SetPOint command sets the target temperature of the environmental chamber. The units
are °C.

After *RST is set to ??? (FIXME: is °0 C).

=== STATus ===
This subsystem controls the SCPI-defined status-reporting structures. 

==== STATus:OPERation ====
The OPERation status register contains conditions which are part of the instrument’s normal
operation.

See SCPI Volume 1 Section 9.3 for more detailed information.

===== STATus:OPERation:CONDition? =====
Returns the contents of the condition register associated with the status structure defined in
the command. Reading the condition register is nondestructive.

The response is (NR1 NUMERIC RESPONSE DATA) (range: 0 through 32767) unless
changed by the :FORMat:SREGister command.

===== STATus:OPERation:ENABled <NRf> | <non-decimal numeric> =====
Sets the enable mask which allows true conditions in the event register to be reported in the
summary bit. If a bit is 1 in the enable register and its associated event bit transitions to true,
a positive transition will occur in the associated summary bit.

The command accepts parameter values of either format in the range 0 through 65535
(decimal) without error.

The query response format is <NR1> unless changed by the :FORMat:SREGister command.
Note that 32767 is the maximum value returned as the most-significant bit of the register
cannot be set true.

===== STATus:OPERation[:EVENt]? =====
This query returns the contents of the event register associated with the status structure
defined in the command.

The response is (NR1 NUMERIC RESPONSE DATA) (range: 0 through 32767) unless
changed by the :FORMat:SREGister command.

Note that reading the event register clears it.

==== STATus:PRESet ====
TODO:

==== STATus:QUEStionable ====
The QUEStionable status register set contains bits which give an indication of the quality of
various aspects of the signal.

A bit set in the condition register indicates that the data currently being acquired or
generated is of questionable quality due to some condition affecting the parameter associated
with that bit. For example, if the FREQ bit were set, this would mean that the frequency
accuracy of the signal was of questionable quality.

See SCPI, Volume 1 Section 9.4 for more detailed information.

==== STATus:QUEStionable:CONDition? ====
Defined the same as STATus:OPERation:CONDition. See SCPI, Section 20.1.2 for details.

==== STATus:QUEStionable:ENABled <NRf> | <non-decimal numeric> ====
Defined the same as STATus:OPERation:ENABle. See SCPI Section 20.1.3 for details.

==== STATus:QUEStionable[:EVENt]? ====
Defined the same as STATus:OPERation:EVENt. See SCPI Section 20.1.4 for details.

=== SYSTem ===

==== SYSTem:ERRor ====
This subsystem collects commands and queries relating to the reading and control of the
error/event queue.

==== SYSTem:ERRor:ALL? ====
TODO: Not implemented

SYSTem:ERRor:ALL? queries the error/event queue for all the unread items and removes
them from the queue. The response is a comma separated list of number, string pairs in FIFO
order. If the queue is empty, the response is 0,"No error"

Note: If the queue is not empty, the 0,"No error" is not sent.

===== SYSTem:ERRor[:NEXT]? =====
SYSTem:ERRor:CODE[:NEXT]? queries the error/event queue for the next item and
removes it from the queue. The response returns only the error/event code number omitting
the string. Except for the shortened response, the query operates identically to
SYSTem:ERRor[:NEXT]?

===== SYSTem:ERRor:COUNt? =====
TODO: Not implemented

SYSTem:ERRor:COUNt? queries the error/event queue for the number of unread items. As
errors and events may occur at any time, more items may be present in the queue at the time
it is actually read.

Note: If the queue is empty, the response is 0.

==== SYSTem:VERSion? ====
This query returns an <NR2> formatted numeric value corresponding to the SCPI version
number for which the instrument complies. The response shall have the form YYYY.V where
the Ys represent the year-version (i.e. 1990) and the V represents an approved revision
number for that year. If no approved revisions are claimed, then this extension shall be 0.

=== TEST ===
The TEST subsystem provides a section to extend standard instrument self-test 
procedures beyond the IEEE 488.2 *TST command.

TODO: Incomplete

